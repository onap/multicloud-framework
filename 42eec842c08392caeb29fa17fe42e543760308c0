{
  "comments": [
    {
      "key": {
        "uuid": "5a93c517_b3d7ecec",
        "filename": "docs/specs/multicloud_resource_capacity_check.rst",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 845
      },
      "writtenOn": "2018-01-30T06:29:19Z",
      "side": 1,
      "message": "I might have misunderstood lots of things.\n\nIn Matti\u0027s email at Tue 1/23/2018 8:28 AM PST, he gave the example in Bullet #5. Basically, his example API looks like:\n\n- available_capacity(cloud_region_id) -\u003e {x: vCPU, y: memory, z: storage}\n\nHost-aggregate example:\n\n- available_capacity(cloud_region, host_aggregate) with the same output.\n\nHPA example:\n\n-available_capacity(cloud_region, {HPA1, HPA2}) and the output would give the available capacity where the two HPA attributes are satisfied\n\nAll of his examples show me that:\n- Input parameters of API call from OOF include VIM identifier\n- Output of API response to OOF are actual available resources of the identified cloud, e.g. number of CPUs, memory size, storage size, HPA capacity etc.\n\nBut the design of this API specs doesn\u0027t meet OOF\u0027s requirement. The output of this API design doesn\u0027t give the actual cloud capacity. Instead, it gives back list of VIMs that it \"thinks\" to have enough capacity, or a simple boolean {true|false}. Therefore the output of proposed API design is not what OOF needs.\n\nOOF needs the actual capacity number, then OOF can determine if the capacity is enough or not based on its own judgement algorithm. It is not MultiVIM\u0027s job to do such judgement/determination for OOF. Rather MultiVIM\u0027s job is to give OOF the capacity data so that OOF can make its own decision based on those data from MultiVIM.\n\nThus IMHO, the API design is wrong.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "42eec842c08392caeb29fa17fe42e543760308c0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_62774b3b",
        "filename": "docs/specs/multicloud_resource_capacity_check.rst",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 845
      },
      "writtenOn": "2018-01-30T18:10:36Z",
      "side": 1,
      "message": "Based on email discussion, here is the suggestion:\n\n(1)\tavailable_capacity()\n\nAs Shankar documented in wiki, getting the capacity data of specified VIMs is a more scalable approach and preferred by OOF. It is understandable that some VIM may not be willing to give those information. Under this circumstance, I suggest that VIM may return empty data of those specific capacities. In addition, you may add one more optional attribute “Other Information” which may suggest a list of other VIMs to OOF.\n\nPlease note that OOF is doing global optimization, and many other constraints need to be considered than capacity. As Shankar documented in wiki, “…OOF would have eliminated many VIMs based on other constraints that make them an infeasible choice for a given problem…”.\n\nSo in a word:\n-\tInput parameter: a list of VIMs (from OOF that has been optimized based on other constraints)\n-\tOutput:\no\tThe capacity data of those VIMs\no\tEmpty data of a VIM, if this VIM is not giving capacity data\no\t(Optional) “Other Information” may give other suggested VIMs.\n\n(2)\tHPA attributes\n\nWhen handling HPA attributes, the capacity data will look like:\n-\tcloud-region-id1: {CPU Pinning: True, NUMA: False, Large Pages: True}\nas suggested by Shankar.\n\nNote this is only an example, not the design.\n\n(3)\tholistic capacity checks\n\nLet us keep on discussion.",
      "parentUuid": "5a93c517_b3d7ecec",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "42eec842c08392caeb29fa17fe42e543760308c0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_6230ab01",
        "filename": "docs/specs/multicloud_resource_capacity_check.rst",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 845
      },
      "writtenOn": "2018-01-30T21:51:39Z",
      "side": 1,
      "message": "(1) Here is an example of available capacity check:\n\n* Request:\n\ncheck_vim_capacity({“vcpu”: int, “mem”: int, “vims”: [cloud-region-id1, cloud-region-id2, cloud-region-id3]})\n\n\n* Response:\n\n{\n\tcloud-region-1: \n\t\t{\n\t\t\t has_capacity: Yes, \n\t\t \t capacities: { \n\t\t\t\t“vcpu”: 20, \n\t\t\t\t“mem”: 100\n\t\t\t }\n\t\t}\n\tcloud-region-2: \n\t\t{\n\t\t\thas_capacity: Yes, \n\t\t \t capacities: { \n\t\t\t }\n\t\t}\n\tcloud-region-3: \n\t\t{\n\t\t\thas_capacity: No, \n\t\t \t capacities: { \n\t\t\t\t“vcpu”: 0, \n\t\t\t\t“mem”: 10\n\t\t\t }\n\t\t}\n}\n\n(3) Holistic Check Example:\n\nAssume we have [cpupin, numa, largepages] as the HPA capabilities for vCPU resource, \"Holistic Check\" of a vCPU with those HPA means:\n\ncpupin AND numa AND largepages AND capacity(vcpu: 5)\n\n\nThis is just an example.",
      "parentUuid": "5a93c517_62774b3b",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "42eec842c08392caeb29fa17fe42e543760308c0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_b6d275fe",
        "filename": "docs/specs/multicloud_resource_capacity_check.rst",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 845
      },
      "writtenOn": "2018-01-31T20:23:05Z",
      "side": 1,
      "message": "Explanation of above example as documented in wiki https://wiki.onap.org/display/DW/OOF+-+MultiCloud+interaction+in+R2:\n\nStep 0: This is pre-condition. OOF is doing global optimization with many constraints, and worked out a shortlist of 3 VIMs { cloud-region-id1, cloud-region-id2, cloud-region-id3 }. Now OOF needs to check those VIMs\u0027 capacity.\n\nStep 1: OOF calls MultiVIM\u0027s API to check those 3 VIMs\u0027 capacity information.\n\nStep 2: MultiVIM checks those 3 VIMs\u0027 capacity information (internal implementation of MultiVIM)\nStep 3: MultiVIM returns 2 pieces of information of each VIM to OOF:\n\n\t1. One piece of information is { Yes | No }, which indicates whether this VIM has sufficient capacity (\"Yes\") or not (\"No\").\n\t1.1. If there is no knowledge (either directly or indirectly) of \"Yes\" or \"No\", empty data will be returned\n\t2. The other piece of information is the actual capacity data of the VIM.\n\t2.1. If the actual capacity data is not available, empty data will be returned\n\nStep 3: OOF gets the capacity information of those 3 VIMs, and continue its work.\n\nIn the example above, cloud-region-1 has capacity and is willing to give precise capacity information, cloud-region-2 has capacity, but is unwilling to provide exact numbers, while cloud-region-3 doesn’t have capacity but is willing to provide available capacity information. Therefore, OOF will now be able to recommend placement for both cloud-region-1 and cloud-region-2, and will be able to cache cloud-region-1 and cloud-region-3 capacities for making better placement decisions.",
      "parentUuid": "5a93c517_6230ab01",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "42eec842c08392caeb29fa17fe42e543760308c0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_a1d784be",
        "filename": "docs/specs/multicloud_resource_capacity_check.rst",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 399
      },
      "writtenOn": "2018-02-06T01:30:47Z",
      "side": 1,
      "message": "Hi Bin, as we discuss in last meeting, might it would be good to separate this to another function to expose the available capacities.",
      "parentUuid": "5a93c517_b6d275fe",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "42eec842c08392caeb29fa17fe42e543760308c0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_c7b188e2",
        "filename": "docs/specs/multicloud_resource_capacity_check.rst",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1889
      },
      "writtenOn": "2018-02-02T00:28:06Z",
      "side": 1,
      "message": "Please make the specification of VIM in the list be possible to be extended. So the input for check_capacity API might looks like:  {“vcpu”: int, “men”: int, “vims”: [{\"cloud-owner\":\"vim1 owner\", \"cloud-region-id\":\"region id 1\"}, {\"cloud-owner\":\"vim2 owner\", \"cloud-region-id\":\"region id 2\"}, {\"cloud-owner\":\"vim3 owner\", \"cloud-region-id\":\"region id 3}]}. With this format, later OOF could add more constraints to those specified VIMs in list, e.g. for the cloud region with multiple available zone,  and OOF want to check that if required capacity is available on specified AZ, then the vim list could be  [{\"cloud-owner\":\"vim1 owner\", \"cloud-region-id\":\"region id 1\", \"availabe-zone\":\"az1\"}, {\"cloud-owner\":\"vim2 owner\", \"cloud-region-id\":\"region id 2\",\"availabe-zone\":\"az2\"}, {\"cloud-owner\":\"vim3 owner\", \"cloud-region-id\":\"region id 3, \"availabe-zone\":\"az3\"}]",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 68,
        "endChar": 49
      },
      "revId": "42eec842c08392caeb29fa17fe42e543760308c0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_81dcc8e5",
        "filename": "docs/specs/multicloud_resource_capacity_check.rst",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 399
      },
      "writtenOn": "2018-02-06T01:30:47Z",
      "side": 1,
      "message": "Hi Bin, actually this is the format that A\u0026AI used, to be consistent with current MultiCloud API, I would suggest we use a string \"{cloud_owner}_{cloud_region_id}\" as  VIM id, since it is how MultiCloud recognize a VIM.",
      "parentUuid": "5a93c517_c7b188e2",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 68,
        "endChar": 49
      },
      "revId": "42eec842c08392caeb29fa17fe42e543760308c0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}