{
  "comments": [
    {
      "key": {
        "uuid": "5a93c517_b3d7ecec",
        "filename": "docs/specs/multicloud_resource_capacity_check.rst",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 845
      },
      "writtenOn": "2018-01-30T06:29:19Z",
      "side": 1,
      "message": "I might have misunderstood lots of things.\n\nIn Matti\u0027s email at Tue 1/23/2018 8:28 AM PST, he gave the example in Bullet #5. Basically, his example API looks like:\n\n- available_capacity(cloud_region_id) -\u003e {x: vCPU, y: memory, z: storage}\n\nHost-aggregate example:\n\n- available_capacity(cloud_region, host_aggregate) with the same output.\n\nHPA example:\n\n-available_capacity(cloud_region, {HPA1, HPA2}) and the output would give the available capacity where the two HPA attributes are satisfied\n\nAll of his examples show me that:\n- Input parameters of API call from OOF include VIM identifier\n- Output of API response to OOF are actual available resources of the identified cloud, e.g. number of CPUs, memory size, storage size, HPA capacity etc.\n\nBut the design of this API specs doesn\u0027t meet OOF\u0027s requirement. The output of this API design doesn\u0027t give the actual cloud capacity. Instead, it gives back list of VIMs that it \"thinks\" to have enough capacity, or a simple boolean {true|false}. Therefore the output of proposed API design is not what OOF needs.\n\nOOF needs the actual capacity number, then OOF can determine if the capacity is enough or not based on its own judgement algorithm. It is not MultiVIM\u0027s job to do such judgement/determination for OOF. Rather MultiVIM\u0027s job is to give OOF the capacity data so that OOF can make its own decision based on those data from MultiVIM.\n\nThus IMHO, the API design is wrong.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "42eec842c08392caeb29fa17fe42e543760308c0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_62774b3b",
        "filename": "docs/specs/multicloud_resource_capacity_check.rst",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 845
      },
      "writtenOn": "2018-01-30T18:10:36Z",
      "side": 1,
      "message": "Based on email discussion, here is the suggestion:\n\n(1)\tavailable_capacity()\n\nAs Shankar documented in wiki, getting the capacity data of specified VIMs is a more scalable approach and preferred by OOF. It is understandable that some VIM may not be willing to give those information. Under this circumstance, I suggest that VIM may return empty data of those specific capacities. In addition, you may add one more optional attribute “Other Information” which may suggest a list of other VIMs to OOF.\n\nPlease note that OOF is doing global optimization, and many other constraints need to be considered than capacity. As Shankar documented in wiki, “…OOF would have eliminated many VIMs based on other constraints that make them an infeasible choice for a given problem…”.\n\nSo in a word:\n-\tInput parameter: a list of VIMs (from OOF that has been optimized based on other constraints)\n-\tOutput:\no\tThe capacity data of those VIMs\no\tEmpty data of a VIM, if this VIM is not giving capacity data\no\t(Optional) “Other Information” may give other suggested VIMs.\n\n(2)\tHPA attributes\n\nWhen handling HPA attributes, the capacity data will look like:\n-\tcloud-region-id1: {CPU Pinning: True, NUMA: False, Large Pages: True}\nas suggested by Shankar.\n\nNote this is only an example, not the design.\n\n(3)\tholistic capacity checks\n\nLet us keep on discussion.",
      "parentUuid": "5a93c517_b3d7ecec",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "42eec842c08392caeb29fa17fe42e543760308c0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_6230ab01",
        "filename": "docs/specs/multicloud_resource_capacity_check.rst",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 845
      },
      "writtenOn": "2018-01-30T21:51:39Z",
      "side": 1,
      "message": "(1) Here is an example of available capacity check:\n\n* Request:\n\ncheck_vim_capacity({“vcpu”: int, “mem”: int, “vims”: [cloud-region-id1, cloud-region-id2, cloud-region-id3]})\n\n\n* Response:\n\n{\n\tcloud-region-1: \n\t\t{\n\t\t\t has_capacity: Yes, \n\t\t \t capacities: { \n\t\t\t\t“vcpu”: 20, \n\t\t\t\t“mem”: 100\n\t\t\t }\n\t\t}\n\tcloud-region-2: \n\t\t{\n\t\t\thas_capacity: Yes, \n\t\t \t capacities: { \n\t\t\t }\n\t\t}\n\tcloud-region-3: \n\t\t{\n\t\t\thas_capacity: No, \n\t\t \t capacities: { \n\t\t\t\t“vcpu”: 0, \n\t\t\t\t“mem”: 10\n\t\t\t }\n\t\t}\n}\n\n(3) Holistic Check Example:\n\nAssume we have [cpupin, numa, largepages] as the HPA capabilities for vCPU resource, \"Holistic Check\" of a vCPU with those HPA means:\n\ncpupin AND numa AND largepages AND capacity(vcpu: 5)\n\n\nThis is just an example.",
      "parentUuid": "5a93c517_62774b3b",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 24
      },
      "revId": "42eec842c08392caeb29fa17fe42e543760308c0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}