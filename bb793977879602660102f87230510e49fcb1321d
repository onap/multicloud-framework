{
  "comments": [
    {
      "key": {
        "uuid": "5a93c517_221148ac",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1889
      },
      "writtenOn": "2018-01-29T06:30:03Z",
      "side": 1,
      "message": "Django is a framework and runserver is a simple webserver for demo. we can change to nginx + uwsgi to improve the performance by supporting concurrent API processing. We don\u0027t need another framework to address this issue. Please refer to:\nhttp://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 22,
        "endChar": 107
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_0240d5a3",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1889
      },
      "writtenOn": "2018-01-24T14:33:42Z",
      "side": 1,
      "message": "I hope this is not intending to change the interface of broker and plugins which are loosely coupled by rest APIs. I prefer sticking to existing overall architecture with regarding to how broker and plugins collaborate and the flexibility to deploy/maintain as well as to expose NBIs via MSB.\n\nThis Multi process framework could be applied to individual plugins which is up to their committer/maintainer\u0027s choice. But it need more discussion when it comes to broker . We need to figure out the specific use case and see what is the benefits.",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 37,
        "endChar": 25
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_85ef0f87",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1205
      },
      "writtenOn": "2018-01-25T02:26:57Z",
      "side": 1,
      "message": "This is not intending to change the interface, but to change how the process works.\n\nAnd this is not a functionality enhancement, but a performance enhancement. I don\u0027t think we can identify *specific* use case for it.\n\nThe change here is to comply the R2 S3P goal. The benefit will be improving the parallelism of API handler. From what I tested in my local computer, current way to run django server can only handle one api request at one time. And according to [Django_Document], we are just using django debug mode in multi-cloud. I see no reason to keep it that way.",
      "parentUuid": "5a93c517_0240d5a3",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 37,
        "endChar": 25
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_3c065187",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 845
      },
      "writtenOn": "2018-01-27T02:12:07Z",
      "side": 1,
      "message": "I might have misunderstood something here. The problem statement above shows me the need of the ability of adding/removing APIs in a automatic way, i.e. generating APIs based on YAML according to what was described at project meeting on Monday.\n\nBut the \"Multi Processes Framework\" seems the improvement of API handling, i.e. the need of the ability of handling multiple API requests concurrently.\n\nThere is a difference between \"Extensible API Framework\" and \"Concurrent API Handling Framework\". The former means the front-end API endpoints can be generated at runtime if YAML changes. The latter means the internal handling of API requests concurrently (no matter what the front-end APIs are, either static or dynamic). The latter actually is more an implementation issue, ie. multi-threading. The former is more a design issue, i.e. definition of API root URL, API pattern, and how to map resource objects in YAML to the API endpoints / resource path in URL, and a tool to generate the dynamic API endpoints (resource path) that can be appended to API root URL, and related data object schema of resources for CRUD operations.",
      "parentUuid": "5a93c517_85ef0f87",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 37,
        "endChar": 25
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_dfcddf5e",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1205
      },
      "writtenOn": "2018-01-29T02:33:45Z",
      "side": 1,
      "message": "Bin, you are right. We are addressing 2 issues here. I know it is a bit confusing, but the fixing of 2 issues are tight coupled. So I use one spec file for them. Maybe I should change the tile of this spec, any suggestion?",
      "parentUuid": "5a93c517_3c065187",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 37,
        "endChar": 25
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_225f0874",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1889
      },
      "writtenOn": "2018-01-29T06:30:03Z",
      "side": 1,
      "message": "while oslo can be a candidate to achieve this \"multiple processing\" purpose, we might also need take a look at another option: django + celery : https://simpleisbetterthancomplex.com/tutorial/2017/08/20/how-to-use-celery-with-django.html",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 53,
        "endChar": 59
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_c2498dd1",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1889
      },
      "writtenOn": "2018-01-24T14:33:42Z",
      "side": 1,
      "message": "This is good to evaluate, again it is up to each individual plugins to decide whether to change the framework.",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 65,
        "endChar": 79
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_e5f7f357",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1205
      },
      "writtenOn": "2018-01-25T02:26:57Z",
      "side": 1,
      "message": "reply below",
      "parentUuid": "5a93c517_c2498dd1",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 65,
        "endChar": 79
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_e244c9b8",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1889
      },
      "writtenOn": "2018-01-24T14:33:42Z",
      "side": 1,
      "message": "does this tool generate API for microservice framework? or just generate swagger file ?",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 80,
        "endChar": 12
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_0503ff42",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1205
      },
      "writtenOn": "2018-01-25T02:26:57Z",
      "side": 1,
      "message": "this is to generate api for http server that each multicloud component will expose.",
      "parentUuid": "5a93c517_e244c9b8",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 80,
        "endChar": 12
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_bcf90182",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 845
      },
      "writtenOn": "2018-01-27T02:12:07Z",
      "side": 1,
      "message": "This is in line with what I understood of an \"Extensible API Framework\". But I didn\u0027t see anything proposed here.\n\nAre you going to develop the spec?\n\nI suggest that we can reuse the design of what OpenStack Gluon project has done - exactly the same thing.\n\nThe design of \"Extensible API Framework\" can be found here:\n\nhttps://github.com/openstack/gluon/blob/master/doc/source/devref/gluon_api_spec.inc.",
      "parentUuid": "5a93c517_0503ff42",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 80,
        "endChar": 12
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_1f3a6736",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1205
      },
      "writtenOn": "2018-01-29T02:33:45Z",
      "side": 1,
      "message": "Thanks, reply below",
      "parentUuid": "5a93c517_bcf90182",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 80,
        "endChar": 12
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_821385b7",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1889
      },
      "writtenOn": "2018-01-24T14:33:42Z",
      "side": 1,
      "message": "I get confused, since I think django is just internal implementation element which is invisible to external API consumers. Backward compatibility refer to API related to external consumers, changing of internal implementation should be irrelevant to API it exposed, correct?",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 90,
        "endChar": 36
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_45b7c786",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1205
      },
      "writtenOn": "2018-01-25T02:26:57Z",
      "side": 1,
      "message": "You are correct. But as your concern above, I agree new things mean unstable. So, we are not replacing current api framework. Instead, I propose to have 2 sets of api framework. And this configuration option is to giving user a choice. And as I mentioned, default value will still choose the current django framework. So that users who don\u0027t care about this feature will not be affected.\nUntil this api framework is mature, it will still be the alternative option. And I don\u0027t think this api framework will be mature in R2.\nSo, what I proposed here is how we can take baby steps while still working toward S3P.",
      "parentUuid": "5a93c517_821385b7",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 90,
        "endChar": 36
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_366e7302",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 299
      },
      "writtenOn": "2018-01-25T22:24:19Z",
      "side": 1,
      "message": "Having looked at the Django docs and a bit into Pecan, +1 to this proposal. It\u0027s not uncommon to provide a user multiple options for the backend that can be configured by the cloud admin that won\u0027t affect end users. It\u0027s like the difference between an OpenStack Cinder deployment using an LVM backend versus a Ceph one. If there\u0027s any part of the work items that you could use a hand with I\u0027d be happy to help.",
      "parentUuid": "5a93c517_45b7c786",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 90,
        "endChar": 36
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_dcf40d89",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 845
      },
      "writtenOn": "2018-01-27T02:12:07Z",
      "side": 1,
      "message": "Agree it is quite stretch to make it mature in R2. Then questions:\n(1) It is an MVP component now. What if it cannot meet R2 schedule? Should we move it as a stretch goal/long term task?\n(2) Once it is mature, can we run both framework concurrently?\n\nThe goal is to have zero impact on current happy users (VF-C, APP-C etc.) If they keep on using existing APIs, there are 2 options:\n(1) support existing APIs in new framework.\n(2) run 2 frameworks concurrently: one for existing APIs to support current users if they don\u0027t want to change; and the other one for new APIs to support anyone who wants to use new APIs.",
      "parentUuid": "5a93c517_366e7302",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 90,
        "endChar": 36
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_5f30ef55",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1205
      },
      "writtenOn": "2018-01-29T02:33:45Z",
      "side": 1,
      "message": "For questions,\n\n(1) The goal is to implement the work in this spec in R2. We are not planning to leave things to R3. So, I don\u0027t think it is good to move it to long term task. What I meant \"it will not be mature in R2\" is that it might have some bugs/issues, and we may spend another one or two release to fix the bugs to make it mature. Does this make sense?\n\n(2) The plan is to let cloud admin choose one framework.\n\nFor options, The plan it so support option (1)",
      "parentUuid": "5a93c517_dcf40d89",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 90,
        "endChar": 36
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_02d3ecd6",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1889
      },
      "writtenOn": "2018-01-29T06:30:03Z",
      "side": 1,
      "message": "basically, I am very concerned to switch to another framework and make it a MVP in such tight schedule for Beijing Release. I suggest we stick to existing building blocks and see how to improve it with existing solutions to accomplish our S3P goal. Anyway, Stability is part of S3P, change the framework is a radical change will endanger the Stability with unknown performance improvement.",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 90,
        "endChar": 36
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_7cf3799e",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 845
      },
      "writtenOn": "2018-01-27T02:12:07Z",
      "side": 1,
      "message": "Certainly, the design of API framework is missing in the task list. But the design of API framework is actually the essence/core/heart of the \"Extensible API Framework\". In addition the API Generator work item is also missing, which is another pillar of this API Framework. Without the design and API Generator tool, current task list won\u0027t achieve the goal of \"Extensible API Framework\".\n\nPlease refer to OpenStack Gluon:\n\n(1) API Design: https://github.com/openstack/gluon/blob/master/doc/source/devref/gluon_api_spec.inc\n\n(2) API Generator (aka Particle Generator): https://github.com/openstack/gluon/tree/master/gluon/particleGenerator\n\n(3) API Server (aka Proton Server): https://github.com/openstack/gluon/tree/master/gluon/api\n\nI encourage reuse.",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 92,
        "endChar": 10
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a93c517_ffd21bd1",
        "filename": "docs/specs/extensible_api_framework.rst",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1205
      },
      "writtenOn": "2018-01-29T02:33:45Z",
      "side": 1,
      "message": "Thanks Bin for pointing that out. I just had a rough mind, written some some poc code locally and draft this spec. I went through project Gluon and find that project Gluon indeed has many same ideas in this spec. I will definitely take Project Gluon as reference.",
      "parentUuid": "5a93c517_7cf3799e",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 92,
        "endChar": 10
      },
      "revId": "bb793977879602660102f87230510e49fcb1321d",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}